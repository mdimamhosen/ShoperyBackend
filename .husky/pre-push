#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

echo "üîç Running pre-push checks for client and server..."

# Function to ask user if they want to continue on error
ask_continue() {
  echo "‚ö†Ô∏è  $1"
  echo "Do you want to continue with the push anyway? (y/N)"
  read -r response
  case "$response" in
    [yY][eE][sS]|[yY]) 
      echo "‚ö†Ô∏è  Continuing with push despite errors..."
      return 0
      ;;
    *)
      echo "‚ùå Push cancelled"
      return 1
      ;;
  esac
}

# Initialize error flags
CLIENT_LINT_ERROR=0
CLIENT_BUILD_ERROR=0
SERVER_LINT_ERROR=0
SERVER_BUILD_ERROR=0

# Run client checks
echo "üì± Checking client..."
cd client

echo "  - Running client lint..."
if ! npm run lint; then
  CLIENT_LINT_ERROR=1
  echo "‚ùå Client lint has issues"
fi

echo "  - Building client..."
if ! npm run build; then
  CLIENT_BUILD_ERROR=1
  echo "‚ùå Client build failed"
fi

cd ..

# Run server checks
echo "üñ•Ô∏è Checking server..."
cd server

echo "  - Running server lint..."
if ! npm run lint; then
  SERVER_LINT_ERROR=1
  echo "‚ùå Server lint has issues"
fi

echo "  - Auto-fixing server lint issues..."
npm run lint:fix

echo "  - Running server format..."
npm run format

echo "  - Building server..."
if ! npm run build; then
  SERVER_BUILD_ERROR=1
  echo "‚ùå Server build failed"
fi

cd ..

# Check if any critical errors occurred
if [ $CLIENT_BUILD_ERROR -eq 1 ]; then
  ask_continue "Client build failed" || exit 1
fi

if [ $SERVER_BUILD_ERROR -eq 1 ]; then
  ask_continue "Server build failed" || exit 1
fi

# For lint errors, just warn but don't block
if [ $CLIENT_LINT_ERROR -eq 1 ] || [ $SERVER_LINT_ERROR -eq 1 ]; then
  echo "‚ö†Ô∏è  Some lint issues were found but auto-fixing was attempted"
fi

echo "‚úÖ Pre-push checks completed! Pushing to repository..."
